require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/commercial_premises_kinds', type: :request do
  include Warden::Test::Helpers

  # def sign_in(resource_or_scope, resource = nil)
  #   resource ||= resource_or_scope
  #   scope = Devise::Mapping.find_scope!(resource_or_scope)
  #   login_as(resource, scope: scope)
  # end

  before do
    @user = create(:user, :client)
    sign_in @user
  end

  # CommercialPremisesKind. As you add validations to CommercialPremisesKind, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for :commercial_premises_kind
  end

  let(:invalid_attributes) do
    attributes_for :commercial_premises_kind, :invalid_short
  end

  # describe 'GET /index' do
  #   include_examples 'GET /index', true, CommercialPremisesKind do
  #     let(:attributes) do
  #       attributes_for :commercial_premises_kind
  #     end
  #   end
  # end

  # describe 'GET /show' do
  #   include_examples 'GET /show', true, CommercialPremisesKind do
  #     let(:attributes) do
  #       attributes_for :commercial_premises_kind
  #     end
  #   end
  # end

  # describe 'GET /new' do
  #   include_examples 'GET /new', true, CommercialPremisesKind
  # end

  # describe 'GET /edit' do
  #   include_examples 'GET /edit', true, CommercialPremisesKind do
  #     let(:attributes) do
  #       attributes_for :commercial_premises_kind
  #     end
  #   end
  # end

  describe 'POST /create' do
    context 'with valid parameters' do
      include_examples 'POST /create', false, CommercialPremisesKind do
        let(:attributes) do
          attributes_for :commercial_premises_kind
        end
      end
    end

    context 'with invalid parameters' do
      include_examples 'POST /create with invalid params', CommercialPremisesKind do
        let(:attributes) do
          attributes_for :commercial_premises_kind, :invalid_short
        end
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        attributes_for :commercial_premises_kind
      end

      it 'updates the requested commercial_premises_kind' do
        commercial_premises_kind = CommercialPremisesKind.create! valid_attributes
        patch commercial_premises_kind_url(commercial_premises_kind),
              params: { commercial_premises_kind: new_attributes }
        commercial_premises_kind.reload
        attributes_for :commercial_premises_kind
      end

      it 'redirects to the commercial_premises_kind' do
        commercial_premises_kind = CommercialPremisesKind.create! valid_attributes
        patch commercial_premises_kind_url(commercial_premises_kind),
              params: { commercial_premises_kind: new_attributes }
        commercial_premises_kind.reload
        expect(response).to redirect_to(commercial_premises_kind_url(commercial_premises_kind))
      end
    end

    context 'with invalid parameters' do
      it "renders a unsuccessful response (i.e. to display the 'edit' template)" do
        commercial_premises_kind = CommercialPremisesKind.create! valid_attributes
        patch commercial_premises_kind_url(commercial_premises_kind),
              params: { commercial_premises_kind: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested commercial_premises_kind' do
      commercial_premises_kind = CommercialPremisesKind.create! valid_attributes
      expect do
        delete commercial_premises_kind_url(commercial_premises_kind)
      end.to change(CommercialPremisesKind, :count).by(-1) #0
    end

    it 'redirects to the commercial_premises_kinds list' do
      commercial_premises_kind = CommercialPremisesKind.create! valid_attributes
      delete commercial_premises_kind_url(commercial_premises_kind)
      expect(response).to redirect_to(commercial_premises_kinds_url) #not_to be success
    end
  end
end
